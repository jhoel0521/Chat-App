import { Injectable } from '@angular/core';
import { Observable, Subject, BehaviorSubject } from 'rxjs';
import { ConfigService } from '../config.service';
import { AuthService } from '../auth/auth.service';
import Echo from 'laravel-echo';
import Pusher from 'pusher-js';

// Declarar Pusher globalmente para Laravel Echo
declare global {
    interface Window {
        Pusher: typeof Pusher;
        Echo: typeof Echo;
    }
}

export interface WebSocketMessage {
    type: string;
    data: any;
    channel: string;
}

@Injectable({
    providedIn: 'root'
})
export class WebSocketService {
    private echo: any = null;
    private connectionStatus = new BehaviorSubject<boolean>(false);
    private messagesSubject = new Subject<WebSocketMessage>();

    // Estados p√∫blicos
    public isConnected$ = this.connectionStatus.asObservable();
    public messages$ = this.messagesSubject.asObservable();

    constructor(
        private configService: ConfigService,
        private authService: AuthService
    ) {
        this.initializeWebSocket();
    }

    /**
     * Inicializar conexi√≥n WebSocket
     */
    private initializeWebSocket(): void {
        this.setupEcho();
    }

    /**
     * Configurar Laravel Echo
     */
    private setupEcho(): void {
        const wsConfig = this.configService.websocketConfig;

        console.log('üîå Configurando Echo para canales P√öBLICOS...');
        console.log('üîå Sin autenticaci√≥n requerida');

        // Configurar Pusher globalmente
        (window as any).Pusher = Pusher;

        // Configurar Echo para Laravel Reverb - SIN AUTENTICACI√ìN
        console.log('üîå Configuraci√≥n Echo (p√∫blico):', {
            broadcaster: 'reverb',
            key: wsConfig.key,
            wsHost: wsConfig.wsHost,
            wsPort: wsConfig.wsPort,
            forceTLS: wsConfig.forceTLS,
            enabledTransports: wsConfig.enabledTransports
        });

        try {
            this.echo = new Echo({
                broadcaster: 'reverb',
                key: wsConfig.key,
                wsHost: wsConfig.wsHost,
                wsPort: wsConfig.wsPort,
                wssPort: wsConfig.wssPort,
                forceTLS: wsConfig.forceTLS,
                enabledTransports: wsConfig.enabledTransports
                // NO AUTH - Solo canales p√∫blicos
            });

            console.log('‚úÖ Echo creado exitosamente (sin autenticaci√≥n)');
            
            // Esperar a que el connector se inicialice
            setTimeout(() => {
                this.setupConnectionEvents();
            }, 100);
            
        } catch (error) {
            console.error('‚ùå Error al crear Echo:', error);
            return;
        }
    }

    /**
     * Configurar eventos de conexi√≥n
     */
    private setupConnectionEvents(): void {
        if (!this.echo) {
            console.error('‚ùå Echo no est√° disponible');
            return;
        }

        // Verificar que el connector exista
        if (!this.echo.connector) {
            console.error('‚ùå Echo connector no est√° disponible');
            return;
        }

        console.log('üîå Echo inicializado:', this.echo);
        console.log('üîå Echo connector:', this.echo.connector);

        // Para Reverb, usar el evento 'connected' del connector
        this.echo.connector.pusher.connection.bind('connected', () => {
            console.log('‚úÖ WebSocket conectado');
            this.connectionStatus.next(true);
        });

        this.echo.connector.pusher.connection.bind('disconnected', () => {
            console.log('‚ùå WebSocket desconectado');
            this.connectionStatus.next(false);
        });

        this.echo.connector.pusher.connection.bind('error', (error: any) => {
            console.error('‚ùå Error de conexi√≥n WebSocket:', error);
            this.connectionStatus.next(false);
        });

        this.echo.connector.pusher.connection.bind('connecting', () => {
            console.log('üîÑ WebSocket conectando...');
        });

        this.echo.connector.pusher.connection.bind('state_change', (states: any) => {
            console.log('üîÑ Estado WebSocket cambi√≥:', states);
            if (states.current === 'connected') {
                this.connectionStatus.next(true);
            } else if (states.current === 'disconnected') {
                this.connectionStatus.next(false);
            }
        });
    }

    /**
     * Suscribirse a una sala de chat
     */
    subscribeToRoom(roomId: string): Observable<any> {
        const roomMessages = new Subject<any>();

        if (!this.echo) {
            console.error('‚ùå Echo no est√° inicializado');
            return roomMessages.asObservable();
        }

        // Verificar conexi√≥n primero
        if (!this.connectionStatus.value) {
            console.warn('‚ö†Ô∏è WebSocket no est√° conectado, esperando conexi√≥n...');
            
            // Esperar a que se conecte
            this.isConnected$.subscribe(connected => {
                if (connected) {
                    console.log('‚úÖ WebSocket conectado, ahora suscribiendo a sala...');
                    this.performRoomSubscription(roomId, roomMessages);
                }
            });
            
            return roomMessages.asObservable();
        }

        // Si ya est√° conectado, suscribirse directamente
        this.performRoomSubscription(roomId, roomMessages);
        return roomMessages.asObservable();
    }

    /**
     * Realizar la suscripci√≥n a la sala
     */
    private performRoomSubscription(roomId: string, roomMessages: Subject<any>): void {
        console.log(`üîå Suscribiendo a canal p√∫blico: room.${roomId}`);

        try {
            // Usar canal P√öBLICO (NO requiere autenticaci√≥n)
            const channel = this.echo.channel(`room.${roomId}`);

            // Escuchar evento de mensaje enviado
            channel.listen('message.sent', (data: any) => {
                console.log('üì® Nuevo mensaje recibido:', data);
                roomMessages.next({
                    type: 'message.sent',
                    data: data,
                    channel: `room.${roomId}`
                });
            });

            // Escuchar evento de usuario que se uni√≥
            channel.listen('user.joined', (data: any) => {
                console.log('üë§ Usuario se uni√≥:', data);
                roomMessages.next({
                    type: 'user.joined',
                    data: data,
                    channel: `room.${roomId}`
                });
            });

            // Escuchar evento de usuario que sali√≥
            channel.listen('user.left', (data: any) => {
                console.log('üë§ Usuario sali√≥:', data);
                roomMessages.next({
                    type: 'user.left',
                    data: data,
                    channel: `room.${roomId}`
                });
            });

            console.log('‚úÖ Suscripci√≥n a canal p√∫blico exitosa');

        } catch (error) {
            console.error('‚ùå Error suscribiendo a canal p√∫blico:', error);
        }
    }

    /**
     * Desuscribirse de una sala
     */
    unsubscribeFromRoom(roomId: string): void {
        if (!this.echo) return;

        console.log(`üîå Desuscribiendo de canal: room.${roomId}`);
        this.echo.leave(`room.${roomId}`);
    }

    /**
     * Desconectar WebSocket
     */
    disconnect(): void {
        if (this.echo) {
            this.echo.disconnect();
            this.connectionStatus.next(false);
        }
    }

    /**
     * Verificar si est√° conectado
     */
    isConnected(): boolean {
        return this.connectionStatus.value;
    }
}
